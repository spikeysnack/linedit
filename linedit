#!/bin/bash
# -*- coding: utf-8 -*-
# linedit -- edit one line in a file


# Chris Reid <spikeysnack@gmail.com>

# GLOBALS ########################################################
OLDIFS=$IFS
#LC_NUMERIC="en_US.UTF-8"

# File Info
TITLE="linedit -- a one line editor"
FILE="linedit"
MIMETYPE="text/plain"
CHARSET="utf-8"
FILETYPE="Bash Script"
DATE="12 Dec 2017"
VERSION="1.2"
STATUS="beta"

# USER CONFIG
CLEARSCREEN=1
TABS=4
# TABS=8  # the default but who uses it anymore?
SAVE_EXT="le" # save edits file extension

## set ups ##
tabs -${TABS}  # set the tabs


numcolors=$(tput colors)
## Requirements
requires="ex wc sed grep" # requirements


## Credits 

declare -A credits # bash 4 associativ array
declare -A license # bash 4 associativ array

credits[author]="Chris Reid"
credits[category]="text editing"
credits[copyright]="Copyright 2017"
credits[country]="United States of America"
credits[credit]=$(printf "%s %s" "(Vim) Bram Moolenaar et al." "(sed,grep,wc) Free Software Foundation, Inc.")
credits[date]="${DATE}"
credits[email]="spikeysnack@gmail.com"
credits[file]="${FILE}"
credits[maintainer]=credits[author] 
credits[note]="Edit in color, one line at a time!"
credits[status]="${STATUS}"
credits[title]="${TITLE}"
credits[version]="${VERSION}"
credits[license]=license

# license info
license[noncommercial]="Free for all non-commercial purposes."
license[mod]="allowed but original attribution must be included."
license[url]="https://creativecommons.org/licenses/by-sa/3.0/"

_norm="$(tput sgr0)" # need this before
_cyan="$(tput setaf 6)"

license[summary]=$(cat <<EOF
You are free to:

${_cyan}Share${_norm} — copy and redistribute the material in any medium or format

${_cyan}Adapt${_norm} — remix, transform, and build upon the material for any purpose,
even commercially.

${_cyan}Attribution${_norm} — You must give appropriate credit,
provide a link to the license, and indicate if changes were made.
You may do so in any reasonable manner,
but not in any way that suggests the licensor endorses you or your use.

${_cyan}ShareAlike${_norm} — If you remix, transform, or build upon the material,
you must distribute your contributions under the same license
as the original.

${_cyan}Revocation${_norm} — The licensor cannot revoke these freedoms as
long as you follow the license terms.

${_cyan}No Additional Restrictions${_norm} — You may not apply legal terms
or technological measures that legally restrict others
from doing anything the license permits.
EOF
)
unset _cyan
unset _norm

# GLOBALS ###############################################


## FUNCTIONS ############################################

## is_integer 
#     @param string
#
#     @output 
#            string if an integer
#            "" if not an integer
#
is_integer()
{

    if [[ ${1} =~ [0-9]+ ]] ; then
	echo "${1}"
    fi
    
}




## de_escape 
#     @param string
#     @output 
#             string without expansion
#             of special characters 
#             needed for grep 

de_escape()
{
    word=$( echo "$1" | sed 's/\\/\\\\/g')

    echo "${word}"
}


# if you have special characters
# set them here
special_chars()
{
    _nl=$(printf "\n")
    _tab=$(printf "\t")
    _cr=$(printf "\r")
    _vtab=$(printf "\v")
}



## check_for_colors
#  @param (none)
#
#  @output
#         string number of colors
#
check_for_colors()
{
    # see if it supports colors...
    ncolors=$(tput colors)
    echo "${ncolors}"
}

## init_colors
#  set color vars
#  @param (none)
#
# @output
#         (none)
#
# @requires
#         check_for_colors
#
init_colors()
{

    if [ $(check_for_colors) -gt 4 ]
    then	
	# text attributes
	normal="$(tput sgr0)"
	bold="$(tput bold)"
	underline="$(tput smul)"
	nounderline="$(tput rmul)"
	standout="$(tput smso)"
	nostandout="$(tput rmso)"
	reverse="$(tput rev)"

	# text fg colors
	black="$(tput setaf 0)"
	red="$(tput setaf 1)"
	green="$(tput setaf 2)"
	yellow="$(tput setaf 3)"
	blue="$(tput setaf 4)"
	magenta="$(tput setaf 5)"
	cyan="$(tput setaf 6)"
	white="$(tput setaf 7)"

	# text bg colors
	bgred="$(tput setab 1)"
	bggreen="$(tput setab 2)"
	bgyellow="$(tput setab 3)"
	bgblue="$(tput setab 4)"
	bgmagenta="$(tput setab 5)"
	bgcyan="$(tput setab 6)"
	bgwhite="$(tput setab 7)"
	bgblack="$(tput setab 0)"

	COLORS=1
    fi
}

## show_license
#
#  @param  (none)
#
#  @output 
#         print license vars
#
#  @requires
#           init_colors
#
show_license()
{
    [[ ! $COLORS ]] && init_colors
    [[ $CLEARSCREEN ]] && tput clear

    echo "${green}"
    printf '=%.0s' {1..80}
    echo "${normal}"

    echo "${bold}"
    echo "${TITLE}${normal}"

    echo "${bold}${green}"
    echo "Author: ${credits[author]}"
    echo "${magenta}"
    echo "License: ${license[noncommercial]}"
    echo "${blue}"
    echo "License URL: ${license[url]}"
    echo "${magenta}"
    echo "Modification: ${license[mod]}"
    echo "${white}"
    echo -e "${license[summary]}\n"
    echo -e "${bold}${yellow}--- ${credits[note]} ---\n"
    echo "${green}"
    printf '=%.0s' {1..80}
    echo "${normal}"
}


## show_version
#
#  @param  (none)
#
#  @output 
#         print version vars
#
#  @requires
#           init_colors
#

show_version()
{
    local default=1
    S=${1:-$default}

    [[ ! $COLORS ]] && init_colors

    >&${S} echo "${bold}${yellow}${credits[title]}${normal}"
    >&${S} echo  "${normal}${yellow}${VERSION}  ${DATE} ${STATUS}"
    >&${S} echo  "${license[noncommercial]}"
    >&${S} echo  "${credits[copyright]} ${credits[author]} <${credits[email]}>"
    >&${S} echo  "${normal}"
}



## show_instructions
#
#  @param  (none)
#
#  @output 
#         print instructions
#
#  @requires
#           init_colors
#

show_instructions()
{
    local e_num
    local i_num
    local visual

    declare -a examples
    declare -a inst

    [[ ! $COLORS ]] && init_colors
    [[ $CLEARSCREEN ]] && tput clear

    t=$(printf "\t")
    tt=$(printf "\t\t")

    examples=$(cat <<EOF
${bold}${white}${bgblue} ${FILE} ${normal}
${bold}${green}${underline}Instructions${normal}

${bold}${white}${FILE}${tt}${bold}${blue}<filename>${normal}${tt}${bold}${green}<line#>${normal} 
${bold}${white}${FILE} -c ${t}${bold}${blue}<filename>${normal}${tt}${bold}${green}<line#>${normal}
${bold}${white}${FILE}${tt}${bold}${blue}<filename>${normal}
${bold}${white}${FILE} -a ${t}${bold}${blue}<filename>${normal}
${bold}${white}${FILE} -p ${t}${bold}${blue}<filename>${normal}
${bold}${white}${FILE} -s ${t}${bold}${yellow}<word>${normal}
${bold}${white}${FILE} -h${normal}
EOF
)
    printf "%s\n" "${examples}"

visual="${bold}${magenta}v${green}i${red}s${blue}u${yellow}a${cyan}l${normal}"

inst=$(cat <<EOF
Type the ${bold}${blue}filename${normal} and ${bold}${green}line number${normal} to edit.

The line will be echoed in ${bold}${blue}light blue${normal}.

The line text will be placed after an ${yellow}edit:${normal} prompt.

Navigate with  ${bold}${yellow}<right>  <left>  <backspace>  <delete>${normal}  keys and edit.

Type ${bold}${blue}<return>${normal} to change the line in the file.

Type ${bold}${yellow}<Ctl>-<C>${normal} to abandon the edit.

If the line is not changed, ${bgblue}no change${normal} is printed.

If the line is changed, a ${visual} representation of the line is printed
   with ${red}spaces${normal}, ${magenta}tabs${normal}, ${green}strings${normal}, and ${bgmagenta}escaped characters${normal} highlighted in color.
   The ${yellow}previous line${normal} is saved to ${bold}${blue}<filename>.le${normal} with a ${bold}${white}timestamp.${normal}
 
A multi-line ${yellow}grep${normal} command is output to show ${bgblue}line${normal} and two lines before and after.

If ${green}<line#>${normal} is ${bold}${yellow}0${normal} the line will be ${bold}${green}prepended${normal}.

If ${green}<line#>${normal} is ${bold}${green}<total+1>${normal} the ${yellow}edited line${normal} will be ${bold}${blue}appended${normal}.
EOF
)

    printf "\n%s\n" "${inst}"
 
    printf "%s\n" "${normal}"
}


## usage
#  @param  (int) stream  
#          (default stdout)
#          
#  @output 
#         print help
#
#  @requires
#           init_colors
#
usage ()
{
    local default=1
    Stream=${1:-$default}

    [[ ! $COLORS ]] && init_colors

    cat <<EOF
${bold}${yellow}
Usage:  ${white}${FILE} ${bold}${blue}<filename>${normal} ${bold}${green}<line#>${normal}
           

        ${bgblue}information options:${normal}

        -c   print line in diagnostic mode
        -h   show this helpful message
        -i   show instructions
        -l   show licensing info
        -q   do not show results
        -s <word>   search for words in a file  
        -v   show version

        ${bgblue}editing options:${normal}

        -a   append  a line to file
        -p   prepend a line to file

        ${bold}${yellow}Example:${bgblack}
 
             ${white}linedit ${bold}${blue}myfile.txt ${green}15${normal}

EOF
    >&${Stream} echo ${normal}
} # usage

##  check_requirements
#
#  test presence of binary tools
#
#  @param  (list) binaries needed 
#          
#  @output 
#         pass : none
#         fail : missing program
#
#  @requires
#           init_colors
#
check_requirements()
{

    local OUT
    local L
    local R

    [[ ! $COLORS ]] && init_colors

    L=("${1}")

    for R in ${L[@]}
    do
	P=$(which "${R}")
	[[ ! "${P}" ]] && OUT="${R}" &&  break
    done
    
    if [[ $OUT ]]
    then

	>&2  echo "${red}A required binary [${OUT}] was not found in the PATH. ${normal}"

	>&2  echo "${yellow}Please find it and put its dir in the PATH variable and try again.${normal}"

	if [ "X${OUT}" == "Xex" ]
	then
	    >&2  echo "${bold}${green}ex should come with the ${blue}vi or vim ${green}package for your distro.${norm}"
	fi

	exit 1
	
    fi

} #check_requirements


##  color_lines
#
#  print line with colors and symbols
#
#  @param  (string) input string   
#          
#  @output 
#         (string) colored string
#
#  @requires
#           init_colors
#
color_line()
{
    set -f

    local line="${1}"
    #    local lastchr

    [[ ! $COLORS ]] && init_colors

    fslash='/'
    bslash='\'
    dqt=\"
    sqt=\'
    tab=$(printf "\t")
    colorspace="${red}·"
    astericks='*'

    if [ $TABS -eq 8 ] ; then
	dblarrow="»       "
    else
	dblarrow="»   "
    fi

    BSLASH=
    FSLASH=
    QUOTED=
    BRACKETED=
    SPACE="0"
    colorspace="${red}·"

    for (( i=0; i<${#line}; i++ )); do
	j=$((i+1))
	c="${line:$i:1}"
	cnxt="${line:$j:1}"

	if [ "$c" == " " ] ; then
	    printf "%s%s" "${colorspace}" ${normal}
	    continue

	elif [ "$c" == "[" ] ; then
	    BRACKETED=1
	    printf "%s%c" "${bold}${yellow}" "${c}" 
	    continue

	elif [ "$c" == "]" ] ; then
	    unset BRACKETED
	    printf "%s%c" "${bold}${yellow}" "${c}"
	    printf "$normal"
	    continue

	elif [ "$c" == $tab ] ; then
	    printf "%s" "${bold}${red}"
	    printf "%s" "$dblarrow"
	    printf "%s" ${normal}
	    continue

	elif [ "$c" == $bslash ] ; then
	    printf "%s%c" "${bold}${magenta}" "${c}"

	    if [[ $BSLASH ]] ; then 
		unset BSLASH
		printf "${normal}"
	    else
		BSLASH=1
	    fi
	    continue

	elif [ "$c" == "/" ] ; then
	    printf "%s%c%s" "${red}" "${c}" "${normal}" 
	    FSLASH=1
	    continue
	    
	elif [ "$c" == $sqt ] ; then
	    printf "%s%c" "${bold}${blue}" "${c}"
	    if [[ $SQT ]] ; then 
		unset SQT
		unset BSLASH
		printf "${normal}"
	    else
		SQT=1
	    fi
	    continue

	elif [ "$c" == $dqt ] ; then
	    
	    printf "%s%c" "${bold}${green}" "${c}"
	    if [[ $QUOTED ]] ; then
		unset QUOTED
		unset BSLASH 
		printf "${normal}"
	    else
		QUOTED=1
	    fi
	    continue

	fi

	[[ $QUOTED    ]] && printf "%s" "${green}"	
	[[ $SQT ]] && printf "${bold}${blue}" 
	[[ $BRACKETED ]] && printf "%s" "${bold}${cyan}"
	[[ $BSLASH    ]] && printf "%s" "${magenta}" && unset BSLASH

	printf "%c%s" "${c}" "${normal}"

    done

    # print blue dollar sign for EOL
    printf "%s%s%s\n\n" "${blue}" "$" "${normal}"

    set +o noglob
} # color_line


search()
{
    declare -a lines
    declare -a lnums

    EDITLINE=
    T="${1}"
    F="${2}"

    mapfile -t lines <<< $(grep  --color=none -n "${T}" "${F}")
    mapfile -t colorlines <<< $(grep  --color=always -n "${T}" "${F}")
   
    length=${#lines[*]}
    # >&2 echo "lines: ${length}"
    
    if [ ${length} -gt 0 ] ; then
	
	for (( i=0; i != length; i++))
	do
	    num=$(echo "${lines[i]}" | cut -f1 -d: )
	    
	    lnums[i]="${num}"
	done
	
	printf "%s" "${bold}${blue}"
	printf "%s\n" "${F}"	
	printf "%s" "${normal}${bold}" 
	
	for ((i=0; i != length; i++))
	do
	    echo -e "${colorlines[i]}\n"
	done
	
	printf "%s\n" "${normal}"
	
    fi

    
    # for n in ${lnums[*]}
    # do
    # 	>&2 echo "${n}"
    # done
    
    # SENTINEL

    n="${#lnums[@]}"

    echo "array size:  ${n}"   

    if [ $((n)) -gt 1 ] ; then
    
	echo "edit which line?"
        
    
	select L in ${lnums[@]} ;
	do
	    EDITLINE=$(echo -e "${L}") 
	    
	    [[ ! $EDITLINE ]] && EDITLINE=$(is_integer "${REPLY}")
	    
	    break	    
	done

    else
	EDITLINE=${lnums[0]}
	
    fi
}




###########################################################
# start script here
main()
{
# colors
[[ ! $COLORS ]] && init_colors

# requirements
check_requirements "${requires}" 

IFS=$(printf "\n") # make space NOT a delimiter


# options (boolean)
APPEND=
CREATE=
COLORLINE=
PREPEND=
QUIET=
SEARCH=
searchterm=
SHOW_HELP=
SHOW_INSTRUCTIONS=
SHOW_LICENSE=
SHOW_VERSION=


# getopts
# get command line options with dashes
# set flag vars for output (cmdline args)

while getopts "achilpqs:v" OPTION
do
    case $OPTION in

	a)
	    APPEND=1
	    shift
	    ;;

	c)
	    COLORLINE=1
	    shift
	    ;;

	h)
	    SHOW_HELP=1
	    shift
	    ;;
	i)
	    SHOW_INSTRUCTIONS=1
	    shift
	    ;;
	l)
	    SHOW_LICENSE=1
	    shift
	    ;;

	p)
	    PREPEND=1
	    shift
	    ;;

	q)
	    QUIET=1
	    shift
	    ;;

	s) 
	    searchterm="${OPTARG}"
	    SEARCH=1
	    shift 1
	    ;;

	v)
	    SHOW_VERSION=1
	    shift
	    ;;

	*)
	    usage 2
	    exit
	    ;;
    esac
done

#
# not used (old getopt binary)
#TEMP=`getopt --options "achilpqv" --long "help,quiet,numbers,verbose,license" -n 'bitrates' -- "$@"`
#eval set -- "$TEMP"
# not used


# options
echo "${normal}"
if [[ ${SEARCH} ]] ; then
    fname="${2}"
    search "${searchterm}" "${fname}"  

    if [[ ${EDITLINE} ]] ; then 

	>&2 echo "1:$1  2:$2 : 3:$3 4:$4" 

	set $EDITLINE ${2} 

	>&2 echo "1:${1}  2:${2}" 
    fi
fi


[[ ${SHOW_HELP} ]]         && usage 1           && exit 0
[[ ${SHOW_INSTRUCTIONS} ]] && show_instructions && exit 0
[[ ${SHOW_LICENSE} ]]      && show_license      && exit 0
[[ ${SHOW_VERSION} ]]      && show_version 1    && exit 0


# parse args after options
if [ ${#@} -eq 0 ] ; then

   printf "\nUsage:  ${white}${FILE} ${bold}${blue}<filename>${normal} ${bold}${green}<line>${normal}\n"

   printf   "        ${white}${FILE} ${bold}${green} -h${normal}\n"
   exit 1
fi

## EDITING ##

# flip $2 and $1 if $1 is integer
# "linedit 3 file" 

if [[ $(is_integer "${1}") ]] ; then
    
    if [[ ! "${2}" ]] ; then
	>&2 printf "%s%s%s\n" "${bold}${red}" "File will be named \"${1}\"." "${normal}"
	
	# confirm file delete
	read -p "${bold}${red}create file ${bold}${blue}${1}${normal} [N]? " -e -r answer
	answer=${answer:-'n'} # default if enter only pressed
	answer=${answer,,}    # all to lower case
	
	# (yes|y) or do nothng
	if ! [[ "${answer}" =~ ^(yes|y)$ ]] ; then
	    exit 1
	fi
    else
	set -- ${2} ${1}   # switch positional args 1 & 2
    fi
fi

# the filename
file="${1}" 

# no file name given
if [ -z "${file}" ] ; then
    >&2 printf "%s%s%s\n" "${red}" "no file name specified." "${normal}"
    [[ ! $QUIET ]] && usage 2
    exit 1
fi

# create the file
if [ ! -e "${file}" ] ; then
    CREATE=1
    touch "${file}"
    PREPEND=1
fi

# check file argument
if [ ! -f "${file}" ] ; then
    >&2 printf "%s\n" "${red} file \"${1}\" not found.${normal}"
    [[ ! $QUIET ]] && usage 2
    exit 2
fi




# clear screen
[[ $CLEARSCREEN ]] && tput clear


# get total lines of file (wc)
IFS=', ' read -r -a fnl <<< "$(wc --lines "${file}")"
file_numlines=$((fnl[0]))
# >&2 printf "[file_numlines:\t %d]\n" "${file_numlines}"

# check we have a line number
if [[ $PREPEND ]] ; then  
   line_num="0"
elif [[ $APPEND ]] ; then
    let "line_num = file_numlines + 1" 
else  

    let "line_num = $2 + 0"

    if [ -z "${line_num}" ] ; then
	>&2 printf "%sno line number given%s\n" "${red}" "${normal}"
	>&2 printf "file %s%s%s has %d lines.\n" "${bold}${blue}" "${file}" "${normal}" "${file_numlines}"
	>&2 printf "${bold}${yellow}Example${white}: ${FILE} ${bold}${blue}${file}"
	>&2 printf "${green} $((file_numlines / 2))${normal} \n\n"
	exit 2
    fi
    
    # check for int
    good_int=$(is_integer "${line_num}" )

    # not an int
    if  [ ! ${good_int}  ] ; then
	>&2 printf "%s bad line number:  not a number%s\n" "${red}" "${normal}"
	exit 1
    else
	# we have a line number
#	line_num=$((line_num + 0))

	# 0 is prepend
	if [ $((line_num)) -eq  0  ] ; then
	    PREPEND=1	
	fi
	# append mode
	if [ $((line_num)) -eq $((file_numlines + 1)) ] ; then
	    APPEND=1
	fi
	
	# line_num > file lines +2 is no good
	if [ $((line_num)) -gt $((file_numlines + 1)) ] ; then
	    bad_line1="${red}bad line number:  ${bold}${white}  "
	    bad_line2="${line_num} > ${file_numlines} ${red} in file ${bold}${blue}${file}${normal}."
	    >&2 printf "%s%s\n" "${bad_line1}" "${bad_line2}" 
	    exit 2
	fi
    fi # ! good int
fi # PREPEND

savestr=

printf "${normal}" # just make sure we are in normal mode

# grab the line unless there is no old line (sed)
[[ ! $APPEND ]] && [[ ! $PREPEND ]] && old_line=$(sed -n -e "${line_num}p" "${file}")

# print out line in color
if [[ $COLORLINE ]] ; then
    cline=$(color_line "${old_line}") 
    printf "%s\n\n" "${cline}"
    exit 0
fi

# get or edit the line
if ! [[ ${new_line} ]] ; then
    
  if  [[ $PREPEND ]] ; then
    
      if  [[ $CREATE ]] ; then
	  # creating
	  _ppstr1="${bold}${yellow}[ ${bold}${magenta}creating ${blue}${file}${white}:"
	  _ppstr2="${green}${line_num} ${bold}${yellow}]${normal}"
	  prependstring="${_ppstr1}${_ppstr2}"
	  printf "%s\n" "${prependstring}"
      else
	  # prepend
	  _ppstr1="${bold}${yellow}[ ${bold}${magenta}prepend to ${blue}${file}${white}:"
	  _ppstr2="${green}${line_num} ${bold}${yellow}]${normal}"
	  prependstring="${_ppstr1}${_ppstr2}"
	  printf "%s\n" "${prependstring}"
	  
      fi
  fi
  
  # append  notice
  if  [[ $APPEND ]] ; then
      # append
      _apstr1="${bold}${yellow}[${bold}${magenta}append to ${blue}${file}${white}:"
      _apstr2="${green}${line_num} ${bold}${yellow}]${normal}"
      appendstring="${_apstr1}${_apstr2}"      
      printf "%s\n" "${appendstring}"
  fi

    #echo the old line
    [[ ! $QUIET ]] && printf "\n%s %d: %s%s%s\n\n" "${green}" "${line_num}" "${bold}${blue}" "${old_line}" "${normal}"

    # edit the line here
    old_IFS=$IFS
    IFS=$'\n'
    read -i "${old_line}"  -e -r -p "${yellow}edit:${normal} " new_line
    IFS=$oldIFS

    # line changed?
    if [ "X${new_line}" == "X${old_line}" ] ; then

	if [[ $CREATE ]] ; then
	    rm "${file}"
	    >&2 printf "%s%s%s\n"  "${bgblue}${white}" "no file created" "${normal}"
	    exit 0
	fi
	printf "\n%s%sno change%s\n" $bgblue $white $normal
	exit 0
    fi
fi # if ! new_line


# do some line editing now
if [[ $new_line ]] ; then

    # save old line to file
    printf -v savestr  "%s\t%s\t%s\t[%s]\n" "${file}" "${line_num}" "${old_line}" $(date)
    echo "${savestr}"  >> "${file}.${SAVE_EXT}" 
    savestr=

    if [[ $PREPEND ]] ; then
	# add line to first line of file (ex)
	ex -sc "1i|${new_line}" -cx "${file}"

    elif [[ $APPEND ]]; then
	# add line to end of file (echo)
	echo "${new_line}" >> "${file}"
	
    else	
	# replace the line (ex)
	ex -s  -c"${line_num}c|${new_line}" -cx "${file}"
   fi

    if [[ ! $QUIET ]] ; then

	# set custom colors
	export GREP_COLORS="ms=01;44:mc=01;47:sl=:cx=:fn=35:ln=32:bn=32:se=36"

	# grep needs \t => \\t or it won't work
	grepstr=$(de_escape "${new_line}")
	# echo "${grepstr}"

	# colorize our line for diagnostics
	cline=$(color_line "${new_line}")

	printf "\n\n"
	echo "${cline}" #echo does not expand escape chars
	printf "\n\n"

	# show what we have done in context (grep)
	grep -n -C 2 --color=always --  ${grepstr}  "${file}"
    fi

else # delete mode

    # delete the line?
    delete_prompt="${bold}${red}delete line ${white}${line_num} ${bgblue}${old_line}${normal} [N]? "
    printf "%s" "${delete_prompt}" 

    # confirm delete
    read  -e -r answer
    answer=${answer:-'N'} # default if enter only pressed
    answer=${answer,,}    # all to lower case

    # (yes|y) or do nothng
    [[ "${answer}" =~ ^(yes|y)$ ]]  && DELETE=1

    # OK confirmed delete 
    if [[ $DELETE ]] ; then
	# save old line to file
	printf -v savestr  "%s\t%s\t%s [%s]\n" "${file}" "${line_num}" "${old_line}" $(date)
	echo "${savestr}"  >> "${file}.${SAVE_EXT}" 
	savestr=

	# delete the line  (sed)
	sed -i -e "${line_num}d" "${file}"

	# zero-length file
	if [ $((file_numlines)) -eq 1 ] ; then

	    >&2 printf "%s%s%s\n"  ${bgred} "${file} will have 0 length." ${normal}
	    # confirm file delete
	    read -p "${bold}${red}delete file ${bold}${blue}${file}${normal} [Y]? " -e -r answer
	    answer=${answer:-'y'} # default if enter only pressed
	    answer=${answer,,}    # all to lower case
	    
	    # (yes|y) or do nothng
	    if [[ "${answer}" =~ ^(yes|y)$ ]] ; then
		
		# backup line and metadata to history file
		deldate=$(printf "[DELETED]\t\t%s\n" $(date))
		echo "${savestr}" >> "${file}.${SAVE_EXT}"
		echo "${deldate}" >> "${file}.${SAVE_EXT}"
		rm "${file}"
		exit 0
	    fi

	fi
	# inform user about deletion and backup
	printf "%sline %s%d %sdeleted%s\n" "${bold}${red}" "${white}" "${line_num}" "${bold}${red}" "${normal}"
	printf "old line saved to file: %s %s %s\n"  "${blue}" "${bold}${file}.${SAVE_EXT}" "${normal}"
    fi

fi # new_line
} # main


main "$@"

# final exit
printf "%s\n" "${normal}"

## DONE


# editor hint:  emacs
# Local Variables:
# coding: utf-8
# mode: Shell-script
# End:

# editor hint:  vim
# vim: ai ts=4 sw=2 et sts=2 ft=bash

# linedit  -- edit one line
# 2017 Chris Reid <spikeysnack@gmail.com>

# END
